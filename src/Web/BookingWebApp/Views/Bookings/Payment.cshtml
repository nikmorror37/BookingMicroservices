@model BookingWebApp.Models.PaymentVm
@using BookingWebApp.Extensions
@inject IConfiguration Config
@{
    ViewData["Title"] = "Payment";
    var nights=(Model.Booking.CheckOut-Model.Booking.CheckIn).Days;
    var price = Model.Booking.Room.Price;
    var total = Model.TotalAmount;
    var today = DateTime.UtcNow;
    var gateway = Config["GatewayBase"] ?? "http://localhost:8080";
    var img = string.IsNullOrEmpty(Model.Booking.Hotel.ImageUrl)
              ? "/img/placeholder-hotel.jpg"
              : Model.Booking.Hotel.ImageUrl.ToGatewayUrl(gateway);
    var minMonth = today.ToString("yyyy-MM");
    var maxMonth = today.AddYears(10).ToString("yyyy-MM");
}
<h2>Payment for booking #@Model.Booking.Id</h2>

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="bi bi-exclamation-triangle-fill me-2"></i>
        @TempData["Error"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="card mb-4">
  <div class="row g-0">
    <div class="col-md-4">
      <img src="@img" class="img-fluid rounded-start" style="height:190px;object-fit:cover;width:100%" />
    </div>
    <div class="col-md-8">
      <div class="card-body">
        <h5 class="card-title mb-1">@Model.Booking.Hotel.Name</h5>
        <p class="card-text mb-1 text-muted">Room: <strong>@Model.Booking.Room.Type</strong> • #@Model.Booking.Room.Number</p>
        <p class="card-text mb-1 text-muted">@Model.Booking.CheckIn.ToString("dd MMM yyyy") – @Model.Booking.CheckOut.ToString("dd MMM yyyy") (@nights night@(nights>1?"s":""))</p>
        <p class="card-text mb-1">Price per night: <strong>$@price.ToString("0.00")</strong></p>
        <h4 class="mt-2">Total: $@total.ToString("0.00")</h4>
      </div>
    </div>
  </div>
</div>
<form asp-action="Pay" method="post" class="needs-validation" novalidate>
  <input type="hidden" name="id" value="@Model.Booking.Id" />
  <div class="mb-3">
    <label class="form-label d-block">Card type</label>
    <div class="d-flex align-items-center gap-2 flex-wrap">
      <input class="btn-check" type="radio" name="cardType" id="visa" value="Visa" checked>
      <label class="btn btn-outline-secondary payment-option" for="visa"><img src="@(gateway)/images/paymentSystems/visa.svg" alt="Visa" height="24"></label>

      <input class="btn-check" type="radio" name="cardType" id="mc" value="MasterCard">
      <label class="btn btn-outline-secondary payment-option" for="mc"><img src="@(gateway)/images/paymentSystems/mc.svg" alt="MasterCard" height="24"></label>

      <input class="btn-check" type="radio" name="cardType" id="amex" value="Amex">
      <label class="btn btn-outline-secondary payment-option" for="amex"><img src="@(gateway)/images/paymentSystems/amex.svg" alt="Amex" height="24"></label>
    </div>
  </div>
  <div class="row g-2">
    <div class="col-md-6">
      <label class="form-label">Name on card</label>
      <input class="form-control" name="cardName" maxlength="50" required pattern=".{1,50}" />
      <div class="invalid-feedback">Name is required (max 50 characters).</div>
    </div>
    <div class="col-md-6">
      <label class="form-label">Card number</label>
      <div class="position-relative"> 
          <input  id="cardNumber"
                  class="form-control pe-5"              
                  name="cardNumber"
                  inputmode="numeric"
                  pattern="\d{15,16}"                    
                  minlength="15" maxlength="16"
                  required />
          <span id="cardIcon"
                class="position-absolute end-0 top-50 translate-middle-y me-2"></span>
      </div> 
      <div class="invalid-feedback">Invalid or unknown card number.</div>
    </div>
  </div>
  <div class="row g-2 mt-2">
    <div class="col-md-4">
      <label class="form-label">Expiration (MM / YYYY)</label>
      <div class="d-flex gap-2">
        <select class="form-select" name="expMonth" required>
          <option value="">MM</option>
          @for (int m = 1; m <= 12; m++) {
            <option value="@m.ToString("D2")">@m.ToString("D2")</option>
          }
        </select>
        <select class="form-select" name="expYear" required>
          <option value="">YYYY</option>
          @for (int y = today.Year; y <= today.AddYears(10).Year; y++) {
            <option value="@y">@y</option>
          }
        </select>
      </div>
      <div class="invalid-feedback">Select a valid expiration date.</div>
    </div>
    <div class="col-md-2">
      <label class="form-label">CVV</label>
      <input id="cvv"
         class="form-control"
         name="cvv"
         inputmode="numeric"
         pattern="\d{3}"
         minlength="3" maxlength="4"
         required />
      <div class="invalid-feedback">CVV must be 3 digits (4 for Amex).</div>
    </div>
  </div>
  <button type="submit" class="btn btn-success mt-3">
    <i class="bi bi-credit-card me-2"></i>Pay $@total.ToString("0.00")
  </button>
  <a asp-action="Details" asp-route-id="@Model.Booking.Id" class="btn btn-outline-secondary mt-3">Cancel</a>
  <style>
    .payment-option img{pointer-events:none;}
  </style>
  <script>
    // Bootstrap custom validation
    (() => {
      'use strict';
      const forms = document.querySelectorAll('.needs-validation');
      // disable past months helper
      const yearSel = document.querySelector('select[name="expYear"]');
      const monthSel = document.querySelector('select[name="expMonth"]');
      const curYear = @today.Year;
      const curMonth= @today.Month;

      function updateMonths(){
          const y = parseInt(yearSel.value);
          Array.from(monthSel.options).forEach(opt=>{
              if(opt.value==='') return;
              const m = parseInt(opt.value);
              opt.disabled = (y===curYear && m < curMonth);
          });
          // if currently selected month is disabled -> reset
          if(monthSel.selectedOptions.length && monthSel.selectedOptions[0].disabled){
              monthSel.value='';
          }
      }
      yearSel.addEventListener('change',updateMonths);
      updateMonths();

      Array.from(forms).forEach(form => {
        form.addEventListener('submit', event => {
          const month = form.querySelector('[name="expMonth"]').value;
          const year  = form.querySelector('[name="expYear"]').value;

          // additional validation for expiration date range
          let expValid = true;
          if(month === '' || year === '') expValid = false;
          else {
             const expDate = new Date(year, month - 1, 1);
             const minDate = new Date('@minMonth-01');
             const maxDate = new Date('@maxMonth-01');
             if(expDate < minDate || expDate > maxDate) expValid = false;
          }

          if (!form.checkValidity() || !expValid) {
            event.preventDefault();
            event.stopPropagation();
          }
          else {
            // if valid - show animation
            const btn = form.querySelector('button[type="submit"]');
            btn.disabled = true;
            btn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Processing payment...';
            
            setTimeout(() => {
                if (btn.disabled) {
                    btn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Verifying with bank...';
                }
            }, 1000);
          }

          form.classList.add('was-validated');
          if(!expValid){
              const fb = form.querySelector('[name="expMonth"]').parentElement.nextElementSibling;
          }
        }, false);
      });
    })();
  </script>
  <script>
  /* ------------ helpers ------------ */
  function luhnValid(num){
      num = num.replace(/\D/g,'');
      let sum = 0, dbl = false;
      for(let i=num.length-1;i>=0;i--){
          let d = parseInt(num[i]);
          if(dbl){ d*=2; if(d>9) d-=9; }
          sum+=d; dbl=!dbl;
      }
      return (sum%10)===0;
  }
  function cardType(num){
      num = num.replace(/\D/g,'');
      if(/^4/.test(num))                       return 'visa';
      if(/^(5[1-5]|2[2-7])/.test(num))         return 'mc';
      if(/^3[47]/.test(num))                   return 'amex';
      return 'unknown';
  }
  function iconHtml(type,gateway){
      switch(type){
          case 'visa': return `<img src="${gateway}/images/paymentSystems/visa.svg" height="24">`;
          case 'mc':   return `<img src="${gateway}/images/paymentSystems/mc.svg"   height="24">`;
          case 'amex': return `<img src="${gateway}/images/paymentSystems/amex.svg" height="24">`;
          default:     return '';
      }
  }
  /* ------------ live validation & icon ------------ */
  (() => {
    const inp   = document.getElementById('cardNumber');
    const icon  = document.getElementById('cardIcon');
    const cvv   = document.getElementById('cvv');  
    const gw    = '@gateway';

    inp.addEventListener('input', () => {
        const num  = inp.value;
        const type = cardType(num);
        icon.innerHTML = iconHtml(type,gw);

        if (type === 'amex') {
          cvv.pattern    = '\\d{4}';
          cvv.placeholder = '1234';
        } else {
            cvv.pattern    = '\\d{3}';
            cvv.placeholder = '123';
        }

        // bootstrap validation style toggle
        if(num.length>=13){
            inp.setCustomValidity(luhnValid(num)? '' : 'invalid');
        }else{
            inp.setCustomValidity('invalid');
        }
    });
  })();
  </script>
</form> 