@using BookingWebApp.Services
@using BookingWebApp.Extensions          
@inject IConfiguration Config
@model BookingDto
@{
    ViewData["Title"] = $"Booking #{Model.Id}";
    var nights = Math.Max(1,(Model.CheckOut-Model.CheckIn).Days);
    var total = Model.Room.Price * nights;
    var rawImg = !string.IsNullOrEmpty(Model.Room.RoomImageUrl) ? Model.Room.RoomImageUrl : Model.Hotel.ImageUrl;
    var gateway = Config["GatewayBase"] ?? "http://localhost:8080";
    var img = string.IsNullOrEmpty(rawImg)
              ? "/img/placeholder-hotel.jpg"
              : rawImg.ToGatewayUrl(gateway);
    var st=(BookingStatus)Model.Status;
    const string checkInTime  = "2:00 pm";
    const string checkOutTime = "12:00 pm";
}
<h2 class="mb-4 text-center">Booking #@Model.Id</h2>

<div class="card shadow-sm mb-4 overflow-hidden mx-auto" style="max-width:900px">
    <div class="row g-0">
        <div class="col-md-5">
            <img src="@img"
                 class="img-fluid h-100 w-100 object-fit-cover rounded-start"
                 alt="@Model.Room.Type" />
        </div>

        <div class="col-md-7 d-flex flex-column">
            <div class="card-body flex-grow-1 d-flex flex-column">
                <div class="d-flex justify-content-between align-items-start mb-1">
                    <h5 class="card-title mb-0">@Model.Hotel.Name @Model.Hotel.City</h5>
                    @await Html.PartialAsync("_BookingBadge", Model.Status)
                </div>

                <p class="text-muted mb-1">
                    @Model.Hotel.Address, @Model.Hotel.City, @Model.Hotel.Country
                </p>

                <p class="mb-1">Room <strong>@Model.Room.Number</strong> • @Model.Room.Type</p>

                <p class="small mb-1">
                    <strong>Check-in:</strong> @Model.CheckIn.ToString("dd MMM yyyy") @checkInTime &nbsp;–&nbsp;
                    <strong>Check-out:</strong> @Model.CheckOut.ToString("dd MMM yyyy") @checkOutTime (@nights night@(nights>1?"s":""))
                </p>

                <p class="small mb-1">@Model.Room.Description</p>
                <p class="small mb-1 text-muted"><i class="bi bi-emoji-frown me-1"></i>No breakfast included</p>
                <p class="small mb-1">
                    Price per night: <strong>$@Model.Room.Price.ToString("0.00")</strong>
                </p>

                <h5 class="mt-2 mb-0 bg-light border-start border-success border-3 
                          py-2 px-3 d-flex justify-content-between align-items-center">
                    <span class="fw-semibold m-0">Total:</span>
                    <span class="fw-bold m-0">$@total.ToString("0.00")</span>
                </h5>
            </div>
        </div>
    </div>
    <div class="card-footer p-0 border-top-0"></div>
        <div id="hotelMap" style="height:250px;"></div>
    </div>
    <div class="card-footer bg-transparent text-center">
    @if(st==BookingStatus.Pending){
        <a class="btn btn-success" asp-controller="Bookings" asp-action="Checkout" asp-route-id="@Model.Id">Pay now</a>
    } else if(st==BookingStatus.RefundError){
        <div class="alert alert-danger d-inline-block me-2 mb-0">Payment failed / refunded.</div>
        <a class="btn btn-warning" asp-controller="Bookings" asp-action="Checkout" asp-route-id="@Model.Id">Retry payment</a>
    } else if(st==BookingStatus.Confirmed){
        <span class="text-success me-3"><i class="bi bi-credit-card-2-front-fill"></i> Paid</span>
        <form asp-action="Cancel" asp-route-id="@Model.Id" method="post" class="d-inline" onsubmit="return confirm('Cancel this booking?');">
            <button class="btn btn-outline-danger">Cancel booking</button>
        </form>
    } else if(st==BookingStatus.Cancelled){
        <span class="text-muted">Booking cancelled.</span>
    }
    </div> 
</div>
<link rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.min.css"
      crossorigin="anonymous" referrerpolicy="no-referrer"/>

<script defer
        src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.js"
        integrity="sha512-BwHfrr4c9kmRkLw6iXFdzcdWV/PGkVgiIyIWLLlTSXzWQzxuSg4DiQUCpauz/EWjgk5TYQqX/kvn9pG1NpYfqg=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>

<script defer>
(() => {
  const addr = `@($"{Model.Hotel.Address}, {Model.Hotel.City}, {Model.Hotel.Country}")`;

  const url = 'https://nominatim.openstreetmap.org/search'
            + '?format=jsonv2'         
            + '&limit=1'
            + '&email=test@gmail.com'
            + '&q=' + encodeURIComponent(addr);

  fetch(url)
    .then(r => {
        if (!r.ok) throw new Error('HTTP ' + r.status);
        return r.json();
    })
    .then(d => {
        if (!d.length) throw new Error('no results');
        const {lat, lon} = d[0];

        const map = L.map('hotelMap', {scrollWheelZoom:false})
                     .setView([lat, lon], 15);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          attribution:'© OpenStreetMap contributors'
        }).addTo(map);

        L.marker([lat, lon]).addTo(map)
         .bindPopup(`@($"{Model.Hotel.Name} {Model.Hotel.City}")`).openPopup();
    })
    .catch(err => {
        console.warn('Geocode error:', err.message);
        document.getElementById('hotelMap').innerHTML =
          '<div class="text-muted p-4">Map unavailable</div>';
    });
})();
</script>
