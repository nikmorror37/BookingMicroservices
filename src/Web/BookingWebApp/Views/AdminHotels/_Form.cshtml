@model BookingWebApp.Controllers.HotelEditVm
@{
    var isCreate = ViewBag.IsCreate as bool? ?? false;
    var action = isCreate?"Create":"Edit";
}
<form asp-action="@action" asp-route-id="@Model.Id" enctype="multipart/form-data" class="row g-3">
  <div class="col-md-6">
    <label class="form-label">Name</label>
    <input asp-for="Name" class="form-control" />
  </div>
  <div class="col-md-6">
    <label class="form-label">Stars</label>
    <select asp-for="Stars" class="form-select">
      @for(int i=1;i<=5;i++){<option value="@i" selected="@(Model.Stars==i)">@i</option>}
    </select>
  </div>
  <div class="col-md-6">
    <label class="form-label">Address</label>
    <input asp-for="Address" class="form-control" />
  </div>
  <div class="col-md-3">
    <label class="form-label">City</label>
    <input asp-for="City" class="form-control" />
  </div>
  <div class="col-md-3">
    <label class="form-label">Country</label>
    <input asp-for="Country" class="form-control" />
  </div>
  <div class="col-md-4">
    <label class="form-label">Distance from center (km)</label>
    <input asp-for="DistanceFromCenter" type="number" step="0.1" class="form-control" />
  </div>
  <div class="col-12">
    <label class="form-label">Description</label>
    <textarea asp-for="Description" rows="4" class="form-control"></textarea>
  </div>
  <div class="col-12">
    <label class="form-label">Image</label><br/>
    @if(!string.IsNullOrEmpty(Model.ImageUrl)){
        <img src="@Model.ImageUrl" style="max-height:150px;" class="mb-2" />
    }
    <input type="file" name="image" class="form-control" accept="image/*" />
  </div>
  <div class="col-12">
    <button class="btn btn-primary">Save</button>
    <a asp-controller="AdminHotels" asp-action="Index" class="btn btn-secondary ms-2">Cancel</a>
  </div>
</form>

@* НОВАЯ секция для загрузки дополнительных изображений - показываем только при редактировании *@
@if (!isCreate)
{
    <hr class="my-4" />
    <h5>Additional Hotel Images</h5>
    
    @* Контейнер для отображения существующих дополнительных изображений *@
    <div id="additionalImagesGallery" class="mb-3">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
    
    @* Форма для загрузки новых дополнительных изображений *@
    <div class="mb-3">
        <label class="form-label">Upload New Images</label>
        <input type="file" id="additionalImagesInput" class="form-control" accept="image/*" multiple />
        <button type="button" class="btn btn-secondary mt-2" onclick="uploadAdditionalImages(event)">
            <i class="bi bi-upload"></i> Upload Images
        </button>
    </div>

    <script>
        // Функция загружается при полной загрузке страницы
        document.addEventListener('DOMContentLoaded', function() {
            // Загружаем существующие изображения отеля
            loadHotelImages();
        });

        // Функция для загрузки и отображения существующих изображений отеля
        function loadHotelImages() {
            // Делаем запрос к API для получения списка изображений
            fetch('/Hotels/GetImages/@Model.Id')
                .then(response => response.json())
                .then(images => {
                    // Находим контейнер для изображений
                    const container = document.getElementById('additionalImagesGallery');
                    // Очищаем контейнер
                    container.innerHTML = '';
                    
                    // Если есть изображения, отображаем их
                    if (images && images.length > 1) {
                        // Создаем заголовок
                        const title = document.createElement('p');
                        title.className = 'text-muted mb-2';
                        title.textContent = 'Current additional images:';
                        container.appendChild(title);
                        
                        // Создаем контейнер для изображений
                        const imagesDiv = document.createElement('div');
                        imagesDiv.className = 'd-flex flex-wrap gap-2';
                        
                        // Пропускаем первое изображение (главное) и отображаем остальные
                        images.slice(1).forEach((imgUrl, index) => {
                            // Создаем элемент изображения
                            const img = document.createElement('img');
                            img.src = imgUrl;
                            img.style.maxHeight = '100px';
                            img.style.maxWidth = '150px';
                            img.className = 'border rounded';
                            img.title = `Additional image ${index + 1}`;
                            imagesDiv.appendChild(img);
                        });
                        
                        container.appendChild(imagesDiv);
                    } else {
                        // Если нет дополнительных изображений, показываем сообщение
                        container.innerHTML = '<p class="text-muted">No additional images uploaded yet.</p>';
                    }
                })
                .catch(error => {
                    // In case случае ошибки показываем сообщение
                    console.error('Error loading images:', error);
                    const container = document.getElementById('additionalImagesGallery');
                    container.innerHTML = '<p class="text-danger">Error loading images.</p>';
                });
        }

        
        // Функция для загрузки новых дополнительных изображений
        function uploadAdditionalImages(event) {  // Добавляем параметр event
            // Получаем элемент input with файлами
            const input = document.getElementById('additionalImagesInput');
            const files = input.files;
            
            // Проверяем, что файлы выбраны
            if (files.length === 0) {
                alert('Please select images to upload');
                return;
            }

            // Создаем FormData для отправки файлов
            const formData = new FormData();
            // Добавляем каждый файл в FormData
            for (let i = 0; i < files.length; i++) {
                formData.append('files', files[i]);
            }

            // Показываем индикатор загрузки
            const button = event.target;
            button.disabled = true;
            button.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Uploading...';

            // Отправляем файлы на сервер
            fetch('/Admin/Hotels/@Model.Id/UploadImages', {
                method: 'POST',
                body: formData
            })
            .then(response => {
                // Проверяем успешность ответа
                if (!response.ok) {
                    throw new Error('Upload failed');
                }
                return response.json();
            })
            .then(data => {
                // При успешной загрузке показываем сообщение
                alert('Images uploaded successfully!');
                // Очищаем input
                input.value = '';
                // Перезагружаем галерею изображений
                loadHotelImages();
            })
            .catch(error => {
                // При ошибке показываем сообщение
                console.error('Error:', error);
                alert('Error uploading images. Please try again.');
            })
            .finally(() => {
                // Восстанавливаем кнопку
                button.disabled = false;
                button.innerHTML = '<i class="bi bi-upload"></i> Upload Images';
            });
        }
    </script>
}